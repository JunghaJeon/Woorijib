import Foundation

/// Ìå®Î∞ÄÎ¶¨ Ìé´ Î™®Îç∏
struct FamilyPet: Identifiable, Codable {
    let id: String
    let familyId: String
    let name: String
    let type: PetType
    let level: Int
    let experience: Int
    let happiness: Int
    let hunger: Int
    let lastFedAt: Date?
    let lastInteractedAt: Date?
    let costume: Costume?
    let createdAt: Date

    enum CodingKeys: String, CodingKey {
        case id
        case familyId = "family_id"
        case name
        case type
        case level
        case experience
        case happiness
        case hunger
        case lastFedAt = "last_fed_at"
        case lastInteractedAt = "last_interacted_at"
        case costume
        case createdAt = "created_at"
    }

    var nextLevelExperience: Int {
        level * 100
    }

    var experienceProgress: Double {
        Double(experience) / Double(nextLevelExperience)
    }

    var happinessStatus: HappinessStatus {
        switch happiness {
        case 80...100: return .veryHappy
        case 60..<80: return .happy
        case 40..<60: return .neutral
        case 20..<40: return .sad
        default: return .verySad
        }
    }

    var hungerStatus: HungerStatus {
        switch hunger {
        case 80...100: return .full
        case 60..<80: return .satisfied
        case 40..<60: return .hungry
        case 20..<40: return .veryHungry
        default: return .starving
        }
    }
}

/// Ìé´ ÌÉÄÏûÖ
enum PetType: String, Codable {
    case dog = "dog"
    case cat = "cat"
    case rabbit = "rabbit"

    var displayName: String {
        switch self {
        case .dog: return "Í∞ïÏïÑÏßÄ"
        case .cat: return "Í≥†ÏñëÏù¥"
        case .rabbit: return "ÌÜ†ÎÅº"
        }
    }
}

/// ÏΩîÏä§Ìä¨
struct Costume: Codable {
    let id: String
    let name: String
    let imageURL: URL

    enum CodingKeys: String, CodingKey {
        case id
        case name
        case imageURL = "image_url"
    }
}

/// ÌñâÎ≥µÎèÑ ÏÉÅÌÉú
enum HappinessStatus {
    case veryHappy
    case happy
    case neutral
    case sad
    case verySad

    var emoji: String {
        switch self {
        case .veryHappy: return "üòÑ"
        case .happy: return "üòä"
        case .neutral: return "üòê"
        case .sad: return "üò¢"
        case .verySad: return "üò≠"
        }
    }

    var description: String {
        switch self {
        case .veryHappy: return "Îß§Ïö∞ ÌñâÎ≥µÌï¥Ïöî"
        case .happy: return "ÌñâÎ≥µÌï¥Ïöî"
        case .neutral: return "Î≥¥ÌÜµÏù¥ÏóêÏöî"
        case .sad: return "Ïä¨ÌçºÏöî"
        case .verySad: return "Îß§Ïö∞ Ïä¨ÌçºÏöî"
        }
    }
}

/// Î∞∞Í≥†Ìîî ÏÉÅÌÉú
enum HungerStatus {
    case full
    case satisfied
    case hungry
    case veryHungry
    case starving

    var emoji: String {
        switch self {
        case .full: return "üòã"
        case .satisfied: return "üôÇ"
        case .hungry: return "üòï"
        case .veryHungry: return "üò´"
        case .starving: return "üòµ"
        }
    }

    var description: String {
        switch self {
        case .full: return "Î∞∞Î∂àÎü¨Ïöî"
        case .satisfied: return "ÎßåÏ°±Ìï¥Ïöî"
        case .hungry: return "Î∞∞Í≥†ÌååÏöî"
        case .veryHungry: return "Îß§Ïö∞ Î∞∞Í≥†ÌååÏöî"
        case .starving: return "Íµ∂Ï£ºÎ¶¨Í≥† ÏûàÏñ¥Ïöî"
        }
    }
}
